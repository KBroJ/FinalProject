<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 속성 : 외부에서 mapper에 접근할 수 있는 이름 -->
<mapper namespace="com.bebeno.mvc.mypage.model.dao.MyPageMapper">

	<!-- 
  		중복되는 쿼리 내용을 재사용하기 위한 SQL 조각으로
  		사용하려는 태그보다 항상 위에 있어야한다.
  	 -->
	<sql id="selectMemberSql">
		SELECT NO, 
		       ID, 
		       NICKNAME,
		       PASSWORD, 
		       ROLE,
		       NAME, 
		       PHONE, 
		       EMAIL, 
		       ADDRESS, 
		       BIRTH, 
		       STATUS, 
		       ENROLL_DATE,
		       MODIFY_DATE,
		       O_PROFILEIMGNAME,
		       R_PROFILEIMGNAME
		FROM MEMBER
	</sql>
	
	<sql id="selectScrapSql">
		SELECT
		    S.SCRAP_NO,
		    M.ID,
		    WB.WAGLE_NO, WB.WAGLE_TITLE, WB.RENAMED_FILENAME
		FROM SCRAP S
		LEFT JOIN MEMBER M
		    ON S.ID = M.ID
		LEFT JOIN WAGLE_BOARD WB
		    ON S.WAGLE_NO = WB.WAGLE_NO
	</sql>


	<!-- 
		resultMap은 DB의 조회 결과와 자바 클래스(객체)를 명시적으로 매핑해줄 때 사용한다.(JDBC 코드를 줄여주는 역할을 한다.)
			ex) DB의 컬럼명에 _가 들어가 있으면(ENROLL_DATE) 자동으로 인식하지 못하기 때문에 vo의 필드값과 DB의 컬럼명을 매칭시켜준다.
		
		  - type 속성 : java 폴더를 기준으로 ResultSet의 결과를 담을 자바 객체(vo)의 타입(클래스명)의 경로를 기술한다.
		  			  (또는 alias 사용 : mybatis-config에서 설정) 
		  - id 속성 : resultMap의 고유 아이디로 select 문에서 resultMap 속성에 사용하게 된다.
	 -->
	 <!-- alias 사용(mybatis-config에서 설정) -->
	<resultMap type="Member" id="memberResultMap">
		<!-- id : 테이블에서 기본 키를 의미 -->
		<id property="no" column="NO"/>
		<!-- result : 테이블에서 일반 컬럼들을 의미 -->
		<result property="id" column="ID"/>
		<result property="nickname" column="NICKNAME"/>
		<result property="password" column="PASSWORD"/>
		<result property="role" column="ROLE"/>
		<result property="name" column="NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="email" column="EMAIL"/>
		<result property="address" column="ADDRESS"/>
		<result property="birth" column="BIRTH"/>
		<result property="status" column="STATUS"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<result property="profileImgNameO" column="O_PROFILEIMGNAME"/>
		<result property="profileImgNameR" column="R_PROFILEIMGNAME"/>
	</resultMap>
	
	<resultMap type="Scrap" id="scrapResultMap">
		<!-- id : 테이블에서 기본 키를 의미 -->
		<id property="scrapNo" column="SCRAP_NO"/>
		<!-- result : 테이블에서 일반 컬럼들을 의미 -->
		<result property="id" column="ID"/>
		<result property="wagleBoardNo" column="WAGLE_NO"/>
		<result property="wagleWriterNo" column="WRITER_NO"/>
		<result property="wagleBoardTitle" column="WAGLE_TITLE"/>
		<result property="wagleBoardRNameFile" column="RENAMED_FILENAME"/>
	</resultMap>
	
	<!--  					 
  		SELECT 구문
  		
  			id 속성 : 쿼리문의 고유 아이디(외부에서 사용할 때 참조 값)  			
	  		resultType : 쿼리 실행 후 조회 된 결과값의 자료형
	  					 Mybatis의 타입의 내장 별칭은 _를 붙여줘야 하는 것이 있다.
	  		* 세미콜론(;) 빼줘야 한다.
  	-->
	<select id="selectCount" resultType="_int">
		SELECT COUNT(*) FROM MEMBER
	</select>
	
	<select id="selectAll" resultMap="memberResultMap">
		<include refid="selectMemberSql" />
		WHERE STATUS = 'Y'
	</select>

	<!--
  		외부에서 매개변수로 받는 값이 있으면 해당하는 매개변수의 타입을 지정해야 한다.(parameterType="string") 
  		외부에서 매개변수로 받은 값은 #{변수명} 으로 설정해서 값을 가져와야 한다.
  	 -->
	<select id="getMemberByNick" parameterType="string" resultMap="memberResultMap">
		<include refid="selectMemberSql" />
		WHERE NICKNAME = #{nickname} AND STATUS = 'Y'
	</select>
	
	<!-- 
  		데이터를 insert한 후 리턴값에 해당하는 파라미터에 PK 값을 받아오기 위해서 useGeneratedKeys, keyColumn, keyProperty 속성을 추가한다.
  		
  			- useGeneratedKeys : insert 후에 PK 값을 받아올 수 있도록 허용하는 속성
  			- keyColumn : 실제 PK에 해당하는 DB의 컬럼을 지정하는 속성
  			- keyProperty : PK값이 담길 파라미터 객체(member)의 필드명을 지정하는 속성
  	 -->
	
	<update id="insertProfileImgName" parameterType="Member">
		UPDATE MEMBER 
		SET 
			NICKNAME = #{nickname},
			O_PROFILEIMGNAME = #{profileImgNameO},
			R_PROFILEIMGNAME = #{profileImgNameR} 
		WHERE NO = #{no}
	</update>
	
	<!-- 비밀번호 변경 : MyPageController => updatePwdSet() -->
	<update id="modifyPwd" parameterType="string">
		UPDATE MEMBER
		SET
			PASSWORD = #{encodeNewPwd}
		WHERE ID = #{id}
	</update>
	
	
	<delete id="deleteAccount" parameterType="string">
		UPDATE MEMBER
		SET
			STATUS = 'N'
		WHERE ID = #{id}
	</delete>
	
	<!-- =========================== 스크랩 관련 mapper =========================== -->
	
	<!-- 특정회원의 id값으로 스크랩한 리스트의 개수 구하기 -->
	<select id="getScrapCount" parameterType="string" resultType="_int">
		SELECT
		    COUNT(*)
		FROM SCRAP S
		LEFT JOIN MEMBER M
		    ON S.ID = M.ID
		LEFT JOIN WAGLE_BOARD WB
		    ON S.WAGLE_NO = WB.WAGLE_NO
		WHERE S.ID = #{id}
	</select>
	
	<select id="scrapPaging" parameterType="string" resultMap="scrapResultMap">
		<!-- <include refid="selectScrapSql"></include> -->
		SELECT
		    S.SCRAP_NO,
		    M.ID,
		    WB.WAGLE_NO, WB.WAGLE_TITLE, WB.RENAMED_FILENAME
		FROM SCRAP S
		LEFT JOIN MEMBER M
		    ON S.ID = M.ID
		LEFT JOIN WAGLE_BOARD WB
		    ON S.WAGLE_NO = WB.WAGLE_NO
		WHERE ID = #{id}
		ORDER BY S.SCRAP_NO DESC
	</select>
	
	<select id="getWagleBoardByNo" parameterType="_int" resultMap="scrapResultMap">
		SELECT 
	    	WAGLE_NO, WRITER_NO, WAGLE_TITLE, RENAMED_FILENAME
		FROM WAGLE_BOARD
		WHERE WAGLE_NO = #{no}
	</select>
	
	<select id="getScrapWBNoByNo" parameterType="_int" resultType="_integer">
		SELECT WAGLE_NO
		FROM SCRAP
		WHERE WAGLE_NO = #{wagleBoardNo}	
	</select>
	
	<!-- 스크랩 리스트 만들기 관련 매퍼 -->
	<select id="scrapList" parameterType="map" resultMap="scrapResultMap">
		SELECT
		    S.SCRAP_NO,
		    M.ID,
		    WB.WAGLE_NO, WB.WRITER_NO, WB.WAGLE_TITLE, WB.RENAMED_FILENAME
		FROM SCRAP S
		LEFT JOIN MEMBER M
		    ON S.ID = M.ID
		LEFT JOIN WAGLE_BOARD WB
		    ON S.WAGLE_NO = WB.WAGLE_NO
		WHERE M.ID = #{id}
		ORDER BY S.SCRAP_NO DESC
	</select>
	
	<insert id="insertScrap" parameterType="Scrap" 
			useGeneratedKeys="true" keyColumn="SCRAP_NO" keyProperty="scrapNo">
		INSERT INTO SCRAP (
			SCRAP_NO,
			ID,
			WAGLE_NO
		) VALUES (
			SEQ_SCRAP_NO.NEXTVAL,
			#{id},
			#{wagleBoardNo}
		)		
	</insert>
	
	<delete id="scrapDelete" parameterType="_int">
		DELETE FROM SCRAP
		WHERE WAGLE_NO = #{wagleBoardNo}
	</delete>
</mapper>
